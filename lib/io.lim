// the io module implements functions to writing
// to and reading from file handlers.

//tp = use "tp.lim";

// runtime wrappers for the std handles
pub stdin  u32 = $rt_stdin;
pub stdout u32 = $rt_stdout;
pub stderr u32 = $rt_stderr;

// runtime wrappers for io functions
fn rt_gets(handle u32, buff str) i32 = rt$rt_gets;
fn rt_puts(handle u32, data str) i32 = rt$rt_puts;

// set of formattable types for printf function family
//pub type formattable = tp::number | str | tp::array;

// prints `data` to stdout
// returns `fail` if any error occurs during printing
pub fn print(data str) !unit = rt {
    fprint(stdout, data)?;
};

// prints a formatted string to stdout
// returns `fail` if any error occurs during printing
// see further documentation on the fprintf definition
//pub fn printf(fmt str, args formattable...) !unit = rt {
//    fprintf(stdout, data, args)?;
//};

// prints `data` followed by a line feed to stdout
// returns `fail` if any error occurs during printing
pub fn println(data str) !unit = rt {
    print(data)?;
    print("\n")?; // TODO: make it a single call with string concatenation
};

// prints a formatted string followed by a line feed to stdout
// returns `fail` if any error occurs during printing
// see further documentation on the fprintf definition
//pub fn printfln(fmt str, args formattable...) !unit = rt {
//    fprintf(stdout, data, args)?;
//    print("\n")?; // TODO: make it a single call with string concatenation
//};

// prints `data` to stderr
// returns `fail` if any error occurs during printing
pub fn error(data str) !unit = rt {
    fprint(stderr, data)?;
};

// prints `data` followed by a line feed to stderr
// returns `fail` if any error occurs during printing
pub fn errorln(data str) !unit = rt {
    error(data)?;
    error("\n")?; // TODO: make it a single call with string concatenation
};

// prints `data` followed by a line feed to stderr and halts the program
// returns `fail` if any error occurs during printing
//
// TODO: mark this function as !void and return exit code of 1 on halt
pub fn fatal(data str) !void = rt {
    errorln(data)!;
};

// prints a single character to the given file handle
// returns `fail` if any error occurs during printing
//
// TODO: make this buffered
pub fn fputc(handle u32, c u8) !unit = rt {
    text str = [ c ] u8;
    fprint(handle, text)?;
};

// prints `data` to the given file handle
// returns `fail` if any error occurs during printing
pub fn fprint(handle u32, data str) !unit = rt {
    => if #data {
        let code = rt_puts(handle, data);
        => if code < 0 { => fail; };
    };
};

// prints a formatted string to the given file handle
// returns `fail` if any error occurs during printing
//
// formatting slots may be less than `args` count, but shall not
// be less than. `fail` is returned if this condition is not met
//
// # formatting
// the output format for each given argument is deduced by its
// type, so instead of a C-like formatted print, it's used a
// rust-like method of curly brackets.
//
//     let name = "maia";
//     fprintf(stdout, "hi! my name is {}\n", name)!;
//
// for escaping the curly brackets syntax use a single backslash
// before the curly brackets, as such:
//
//
//     fprintf(stdout, "no formatting \{\}\n")!;
//
// if the first bracket is already escaped, escaping the closing
// curly bracket is optional.
//
// [to be deprecated]
// currently, no additional for types, such as float types being
// displayed as ratios or with fractions, number of digits for
// each number, etc. but it's planned to be added before v1.0
//pub fn fprintf(handle u32, fmt str, args formattable...) !unit = rt {
//    => for a u64 = 0; b, c, a .. fmt {
//        => if b != '\\' {
//            => if c == '{' && a == '}' {
//                if a < #args {
//                    => match args[a] {
//                    num : tp::number =>
//                        fprint(handle, tp::itoa(num))?;
//                    txt : str =>
//                        fprint(handle, txt);
//                    arr : tp::array =>
//                        fprint(handle, tp::strarray(arr))?;
//                    };
//                    => a + 1;
//                } else {
//                    => fail;
//                }
//            } else {
//                fputc(handle, c)?;
//                => a;
//            };
//        } else if b == '{' && c == '}' {
//            => a;
//        } else if b == '\' && c == '{' || b == '\' && c == '}' {
//            fputc(handle, c)?;
//            => a;
//        } else {
//            fputc(handle, c)?;
//            => a;
//        };
//    };
//};

// [to be deprecated]
// reads the stdin up to the capacity of the given
// buffer and writes the read data to it
// returns `fail` if any error occurs during reading
pub fn scan(buff str) !unit = rt {
    fscan(stdin, buff)?;
};

// [to be deprecated]
// reads the given `handle` up to the capacity of the
// given buffer and writes the read data to it
// returns `fail` if any error occurs during reading
pub fn fscan(handle u32, buff str) !unit = rt {
    let code = rt_gets(stdin, buff);
    => if code < 0 { => fail; };
};

