// the fs module provides all sorts of functions for
// interacting with the underlying file system

rt mod = use "std/rt.lim";

// [fs::open] file flags
pub READONLY  u32 = 0o0000;
pub WRITEONLY u32 = 0o0001;
pub READWRITE u32 = 0o0002;
pub CREATE    u32 = 0o0100;
pub EXEC      u32 = 0o0200;
pub TRUNCATE  u32 = 0o1000;
pub APPEND    u32 = 0o2000;

// opens a file and returns a file handle
pub fn open(mut filename str, flags u32) !u32 = rt & fs_read {
    let handle = rt::open(filename cstr, flags, 0o7000);
    if handle > 0 {
        return handle u32;
    } else {
        return error;
    };
};

pub fn close(handle u32) !unit = rt & fs {
    if rt::close(handle) < 0 {
        return error;
    };
};

pub fn remove(mut filename str) !unit = rt & fs {
    if rt::unlink(filename cstr) < 0 {
        return error;
    };
};

pub fn rename(mut oldname str, mut newname str) !unit = rt & fs {
    if rt::rename(oldname cstr, newname cstr) < 0 {
        return error;
    };
};
